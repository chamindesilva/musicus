/*
* To change this template, choose Tools | Templates
* and open the template in the editor.
*/
package com.musicus.gui;

import com.musicus.agent.MusicLibraryAgent;
import com.musicus.db.SongCollection;
import com.musicus.model.Song;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

/**
 * @author Chamin
 */
public class MainFrame extends javax.swing.JFrame
{
    private MusicLibraryAgent musicLibraryAgent;
    static final JFileChooser fc = new JFileChooser();
    public static final String FILE_TAG = "<file>";
    public static final String FILE_END = "</file>";

    /**
     * Creates new form MainFrame
     */
    public MainFrame( MusicLibraryAgent musicLibraryAgent )
    {
        initComponents();
        //        loadInitData();
        this.musicLibraryAgent = musicLibraryAgent;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jButton3 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableListners = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSongClasses = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        tblCollectionLists = new javax.swing.JTable();
        tblCollectionSongs = new javax.swing.JTable();
        btnAddCollection = new javax.swing.JButton();
        btnAddSongs = new javax.swing.JButton();
        btnRemoveCollection = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();

        setDefaultCloseOperation( javax.swing.WindowConstants.EXIT_ON_CLOSE );
        setTitle( "Listners" );

        jPanel1.setBorder( javax.swing.BorderFactory.createEtchedBorder() );

        tblCollectionSongs.setModel( new javax.swing.table.AbstractTableModel()
        {
            String[] columnNames = {"Name", "Path"};
            Class[] types = new Class[]{java.lang.String.class, String.class};
            boolean[] canEdit = new boolean[]{false, false};


            @Override public int getRowCount()
            {
                int selectedViewRow = tblCollectionLists.getSelectedRow();
                if( selectedViewRow != -1 && musicLibraryAgent != null && musicLibraryAgent.getMusicLibrary() != null )
                {
                    int selectedModelRow = tblCollectionLists.convertRowIndexToModel( selectedViewRow );
                    SongCollection selectedCollection = musicLibraryAgent.getMusicLibrary().get( selectedModelRow );
                    System.out.println( ">>>>>> seleted collection's songs cont " + selectedCollection.getSongsList().size() );
                    return ( selectedCollection != null && selectedCollection.getSongsList() != null ) ? selectedCollection.getSongsList().size() : 0;
                }
                else
                {
                    return 0;
                }
            }

            @Override public int getColumnCount()
            {
                return columnNames.length;
            }

            @Override public String getColumnName( int column )
            {
                return columnNames[column];
            }

            @Override public Object getValueAt( int rowIndex, int columnIndex )
            {
                if( musicLibraryAgent != null )
                {
                    int selectedViewRow = tblCollectionLists.getSelectedRow();
                    if( selectedViewRow != -1 && musicLibraryAgent != null && musicLibraryAgent.getMusicLibrary() != null )
                    {
                        int selectedModelRow = tblCollectionLists.convertRowIndexToModel( selectedViewRow );
                        SongCollection selectedCollection = musicLibraryAgent.getMusicLibrary().get( selectedModelRow );

                        if( selectedCollection != null && selectedCollection.getSongsList() != null )
                        {
                            Song songRow = selectedCollection.getSongsList().get( rowIndex );
                            if( columnIndex == 0 )
                            {
                                return songRow.getName();
                            }
                            else if( columnIndex == 1 )
                            {
                                return songRow.getPath();
                            }
                            else
                            {
                                return "";
                            }
                        }
                    }
                    else
                    {
                        return "";
                    }
                }

                return "";
            }

            /*public void setValueAt( Object aValue, int rowIndex, int columnIndex )
            {
                if( musicLibraryAgent != null )
                {
                    List<SongCollection> musicLibrary = musicLibraryAgent.getMusicLibrary();
                    SongCollection collection = musicLibrary.get( rowIndex );
                    if( columnIndex == 1 )
                    {
                        collection.setEnabled( (Boolean) aValue );
                    }
                }

            }*/

            public Class getColumnClass( int columnIndex )
            {
                return types[columnIndex];
            }

            public boolean isCellEditable( int rowIndex, int columnIndex )
            {
                return canEdit[columnIndex];
            }
        } );
        tblCollectionSongs.getTableHeader().setReorderingAllowed( false );
        jScrollPane3.setViewportView( tblCollectionSongs );
        btnAddCollection.setText( "Add New Collection" );
        btnAddCollection.addActionListener( new java.awt.event.ActionListener()
        {
            public void actionPerformed( java.awt.event.ActionEvent evt )
            {
                btnAddCollectionActionPerformed( evt );
            }
        } );

        btnAddSongs.setText( "Add New Songs" );
        btnAddSongs.addActionListener( new java.awt.event.ActionListener()
        {
            public void actionPerformed( java.awt.event.ActionEvent evt )
            {
                btnAddSongsActionPerformed( evt );
            }
        } );

        btnRemoveCollection.setText( "Remove" );
        btnRemoveCollection.addActionListener( new java.awt.event.ActionListener()
        {
            public void actionPerformed( java.awt.event.ActionEvent evt )
            {
                btnRemoveCollectionActionPerformed( evt );
            }
        } );

        jButton3.setText( "Save Library" );
        jButton3.addActionListener( new java.awt.event.ActionListener()
        {
            public void actionPerformed( java.awt.event.ActionEvent evt )
            {
                jButton3ActionPerformed( evt );
            }
        } );

        tblCollectionLists.setModel( new javax.swing.table.AbstractTableModel()
        {
            String[] columnNames = {"Collection name", "Active", "Sequenced"};
            Class[] types = new Class[]{java.lang.String.class, Boolean.class, Boolean.class};
            boolean[] canEdit = new boolean[]{true, true, false};


            @Override public int getRowCount()
            {
                return musicLibraryAgent != null && musicLibraryAgent.getMusicLibrary() != null ? musicLibraryAgent.getMusicLibrary().size() : 0;
            }

            @Override public int getColumnCount()
            {
                return columnNames.length;
            }

            @Override public String getColumnName( int column )
            {
                return columnNames[column];
            }

            @Override public Object getValueAt( int rowIndex, int columnIndex )
            {
                if( musicLibraryAgent != null )
                {
                    List<SongCollection> musicLibrary = musicLibraryAgent.getMusicLibrary();
                    SongCollection collection = musicLibrary.get( rowIndex );
                    if( columnIndex == 0 )
                    {
                        return collection.getName();
                    }
                    else if( columnIndex == 1 )
                    {
                        return collection.isEnabled();
                    }
                    else if( columnIndex == 2 )
                    {
                        return collection.isSequenced();
                    }
                }

                return "";
            }

            public void setValueAt( Object aValue, int rowIndex, int columnIndex )
            {
                if( musicLibraryAgent != null )
                {
                    List<SongCollection> musicLibrary = musicLibraryAgent.getMusicLibrary();
                    SongCollection collection = musicLibrary.get( rowIndex );
                    if( columnIndex == 1 )
                    {
                        collection.setEnabled( (Boolean) aValue );
                    }
                }

            }

            public Class getColumnClass( int columnIndex )
            {
                return types[columnIndex];
            }

            public boolean isCellEditable( int rowIndex, int columnIndex )
            {
                return canEdit[columnIndex];
            }
        } );
        jScrollPane4.setViewportView( tblCollectionLists );
        tblCollectionLists.getSelectionModel().addListSelectionListener( new ListSelectionListener()
        {
            public void valueChanged( ListSelectionEvent event )
            {
                int viewRow = tblCollectionLists.getSelectedRow();
                if( viewRow != -1 )
                {
                    /*
                    int modelRow = tblCollectionSongs.convertRowIndexToModel( viewRow );

                    int selectedCollectionNo = tblCollectionSongs.getSelectedRow();
                    if( selectedCollectionNo != -1 && musicLibraryAgent != null && musicLibraryAgent.getMusicLibrary() != null )
                    {
                        SongCollection selectedCollection = musicLibraryAgent.getMusicLibrary().get( modelRow );
                        if( selectedCollection != null && selectedCollection.getSongsList() != null )
                        {
                            selectedCollection.getSongsList().size():0;
                        }
                    }*/
                    ( (AbstractTableModel) tblCollectionSongs.getModel() ).fireTableDataChanged();
                    System.out.println( "selected row " + viewRow );
                }
            }
        } );


        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout( jPanel2 );
        jPanel2.setLayout( jPanel2Layout );
        jPanel2Layout.setHorizontalGroup( jPanel2Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGroup( jPanel2Layout.createSequentialGroup().addContainerGap().addComponent( jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE ).addGap( 18, 18, 18 ).addComponent( jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE ).addGap( 26, 26, 26 ).addGroup( jPanel2Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING, false ).addComponent( btnAddCollection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE ).addComponent( btnAddSongs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE ).addComponent( btnRemoveCollection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE ).addComponent( jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE ) ).addGap( 20, 20, 20 ) ) );
        jPanel2Layout.setVerticalGroup( jPanel2Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGroup( jPanel2Layout.createSequentialGroup().addContainerGap().addGroup( jPanel2Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING, false ).addComponent( jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE ).addGroup( jPanel2Layout.createSequentialGroup().addComponent( btnAddCollection ).addComponent( btnAddSongs ).addPreferredGap( javax.swing.LayoutStyle.ComponentPlacement.UNRELATED ).addComponent( btnRemoveCollection ).addPreferredGap( javax.swing.LayoutStyle.ComponentPlacement.UNRELATED ).addComponent( jButton3 ) ).addComponent( jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE ) ).addContainerGap( javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE ) ) );

        jTabbedPane1.addTab( "Song List", jPanel2 );

        jTableListners.setModel( new javax.swing.table.DefaultTableModel( new Object[][]{

        }, new String[]{"Song"} )
        {
            Class[] types = new Class[]{java.lang.String.class};
            boolean[] canEdit = new boolean[]{false};

            public Class getColumnClass( int columnIndex )
            {
                return types[columnIndex];
            }

            public boolean isCellEditable( int rowIndex, int columnIndex )
            {
                return canEdit[columnIndex];
            }
        } );
        jScrollPane2.setViewportView( jTableListners );

        jButton7.setText( "Add" );
        jButton7.addActionListener( new java.awt.event.ActionListener()
        {
            public void actionPerformed( java.awt.event.ActionEvent evt )
            {
                jButton7ActionPerformed( evt );
            }
        } );

        jButton8.setText( "Remove" );

        jButton9.setText( "Rebuild" );
        jButton9.addActionListener( new java.awt.event.ActionListener()
        {
            public void actionPerformed( java.awt.event.ActionEvent evt )
            {
                jButton9ActionPerformed( evt );
            }
        } );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout( jPanel4 );
        jPanel4.setLayout( jPanel4Layout );
        jPanel4Layout.setHorizontalGroup( jPanel4Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGroup( jPanel4Layout.createSequentialGroup().addGap( 18, 18, 18 ).addComponent( jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 719, javax.swing.GroupLayout.PREFERRED_SIZE ).addGap( 18, 18, 18 ).addGroup( jPanel4Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.TRAILING, false ).addComponent( jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE ).addComponent( jButton8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE ).addComponent( jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE ) ).addContainerGap( 97, Short.MAX_VALUE ) ) );
        jPanel4Layout.setVerticalGroup( jPanel4Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGroup( jPanel4Layout.createSequentialGroup().addContainerGap().addGroup( jPanel4Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGroup( jPanel4Layout.createSequentialGroup().addComponent( jButton7 ).addPreferredGap( javax.swing.LayoutStyle.ComponentPlacement.UNRELATED ).addComponent( jButton8 ).addPreferredGap( javax.swing.LayoutStyle.ComponentPlacement.UNRELATED ).addComponent( jButton9 ).addGap( 0, 0, Short.MAX_VALUE ) ).addComponent( jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE ) ).addContainerGap() ) );

        jTabbedPane1.addTab( "Listners", jPanel4 );

        tblSongClasses.setModel( new javax.swing.table.DefaultTableModel( new Object[][]{

        }, new String[]{"Song"} )
        {
            Class[] types = new Class[]{java.lang.String.class};
            boolean[] canEdit = new boolean[]{false};

            public Class getColumnClass( int columnIndex )
            {
                return types[columnIndex];
            }

            public boolean isCellEditable( int rowIndex, int columnIndex )
            {
                return canEdit[columnIndex];
            }
        } );
        jScrollPane1.setViewportView( tblSongClasses );

        jButton4.setText( "Add" );
        jButton4.addActionListener( new java.awt.event.ActionListener()
        {
            public void actionPerformed( java.awt.event.ActionEvent evt )
            {
                jButton4ActionPerformed( evt );
            }
        } );

        jButton5.setText( "Remove" );

        jButton6.setText( "Rebuild" );
        jButton6.addActionListener( new java.awt.event.ActionListener()
        {
            public void actionPerformed( java.awt.event.ActionEvent evt )
            {
                jButton6ActionPerformed( evt );
            }
        } );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout( jPanel3 );
        jPanel3.setLayout( jPanel3Layout );
        jPanel3Layout.setHorizontalGroup( jPanel3Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGroup( jPanel3Layout.createSequentialGroup().addContainerGap().addComponent( jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 731, javax.swing.GroupLayout.PREFERRED_SIZE ).addGap( 18, 18, 18 ).addGroup( jPanel3Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGroup( jPanel3Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING, false ).addComponent( jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE ).addComponent( jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE ) ).addComponent( jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE ) ).addContainerGap( 93, Short.MAX_VALUE ) ) );
        jPanel3Layout.setVerticalGroup( jPanel3Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGroup( jPanel3Layout.createSequentialGroup().addContainerGap().addGroup( jPanel3Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addComponent( jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE ).addGroup( jPanel3Layout.createSequentialGroup().addComponent( jButton4 ).addPreferredGap( javax.swing.LayoutStyle.ComponentPlacement.UNRELATED ).addComponent( jButton5 ).addPreferredGap( javax.swing.LayoutStyle.ComponentPlacement.UNRELATED ).addComponent( jButton6 ).addGap( 0, 0, Short.MAX_VALUE ) ) ).addContainerGap() ) );

        jTabbedPane1.addTab( "Song Classes", jPanel3 );

        btnPlay.setText( "Play >" );
        btnPlay.addActionListener( new java.awt.event.ActionListener()
        {
            public void actionPerformed( java.awt.event.ActionEvent evt )
            {
                btnPlayActionPerformed( evt );
            }
        } );

        btnStop.setText( "Stop" );
        btnStop.addActionListener( new java.awt.event.ActionListener()
        {
            public void actionPerformed( java.awt.event.ActionEvent evt )
            {
                btnStopActionPerformed( evt );
            }
        } );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout( jPanel1 );
        jPanel1.setLayout( jPanel1Layout );
        jPanel1Layout.setHorizontalGroup( jPanel1Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGroup( jPanel1Layout.createSequentialGroup().addGap( 369, 369, 369 ).addComponent( btnPlay ).addPreferredGap( javax.swing.LayoutStyle.ComponentPlacement.RELATED ).addComponent( btnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE ).addContainerGap( javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE ) ).addComponent( jTabbedPane1 ) );
        jPanel1Layout.setVerticalGroup( jPanel1Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGroup( jPanel1Layout.createSequentialGroup().addGap( 41, 41, 41 ).addComponent( jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE ).addGap( 18, 18, 18 ).addGroup( jPanel1Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.BASELINE ).addComponent( btnPlay ).addComponent( btnStop ) ).addContainerGap( 25, Short.MAX_VALUE ) ) );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout( getContentPane() );
        getContentPane().setLayout( layout );
        layout.setHorizontalGroup( layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addComponent( jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE ) );
        layout.setVerticalGroup( layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addComponent( jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE ) );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //    private void loadInitData()
    //    {
    //        String batchFilePath = "C:\\Program Files\\jAudio\\SampleJAudioBatchFile.xml";
    //        // read file with songs in the GUI table
    //        BufferedReader in = null;
    //        String read;
    //        boolean fileTagFound = false;
    //        String lineSeperator = System.getProperty( "line.separator" );
    //        List<String> initFileList = new ArrayList<String>();
    //        try
    //        {
    //            //open a bufferedReader to file helloworld.txt
    //            in = new BufferedReader( new FileReader( batchFilePath ) );
    //
    //            // read a line from helloworld.txt and save into a string
    //            while( ( read = in.readLine() ) != null )
    //            {
    //                if( read.contains( FILE_TAG ) )
    //                {
    //                    initFileList.add( read.substring( read.indexOf( FILE_TAG ) + FILE_TAG.length(), read.indexOf( FILE_END ) ) );
    //                }
    //            }
    //
    //        }
    //        catch( IOException e )
    //        {
    //            System.out.println( "There was a problem:" + e );
    //        }
    //        finally
    //        {
    //            //safely close the BufferedReader after use
    //            try
    //            {
    //                in.close();
    //            }
    //            catch( IOException e )
    //            {
    //                e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
    //            }
    //        }
    //
    //        for( String file : initFileList )
    //        {
    //            //This is where a real application would open the file.
    //            String[] row = {file.substring( file.lastIndexOf( "\\" ) + 1, file.length() ), file};
    //            ( (DefaultTableModel) songsTable.getModel() ).addRow( row );
    //            ( (DefaultTableModel) jTableListners.getModel() ).addRow( row );
    //            ( (DefaultTableModel) tblSongClasses.getModel() ).addRow( row );
    //        }
    //    }

    private void jButton2ActionPerformed( java.awt.event.ActionEvent evt )
    {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void songsRebuildBtnActionPerformed( java.awt.event.ActionEvent evt )
    {//GEN-FIRST:event_jButton3ActionPerformed
        /*long startTime = System.currentTimeMillis();

        String batchFilePath = "C:\\Program Files\\jAudio\\SampleJAudioBatchFile.xml";
        // read file with songs in the GUI table
        BufferedReader in = null;
        String read;
        StringBuilder batchFileSb = new StringBuilder();
        boolean fileTagFound = false;
        String lineSeperator = System.getProperty( "line.separator" );
        try
        {
            //open a bufferedReader to file helloworld.txt
            in = new BufferedReader( new FileReader( batchFilePath ) );

            // read a line from helloworld.txt and save into a string
            while( ( read = in.readLine() ) != null )
            {
                if( !read.contains( FILE_TAG ) )
                {
                    batchFileSb.append( read ).append( lineSeperator );
                }
                else if( !fileTagFound )
                {
                    int rowCount = songsTable.getModel().getRowCount();
                    RecordingInfo[] recordingInfos = new RecordingInfo[rowCount];
                    for( int row = 0; row < rowCount; row++ )
                    {
                        String path = (String) songsTable.getModel().getValueAt( row, 1 );
                        batchFileSb.append( "\t\t\t<file>" ).append( path ).append( "</file>" ).append( lineSeperator );
                    }
                    fileTagFound = true;
                }
            }

            //print out the line
            System.out.println( "Batch file: " + batchFileSb.toString() );
        }
        catch( IOException e )
        {
            System.out.println( "There was a problem:" + e );
        }
        finally
        {
            //safely close the BufferedReader after use
            try
            {
                in.close();
            }
            catch( IOException e )
            {
                e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            }
        }

        BufferedWriter out = null;
        try
        {
            out = new BufferedWriter( new FileWriter( batchFilePath ) );

            //Write out the specified string to the file
            out.write( batchFileSb.toString() );
        }
        catch( IOException e )
        {
            System.out.println( "There was a problem:" + e );
        }
        finally
        {
            //flushes and closes the stream
            try
            {
                out.close();
            }
            catch( IOException e )
            {
                e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            }
        }


        File batch = new File( batchFilePath );
        if( !batch.exists() )
        {
            System.out.println( "Batch file '" + batchFilePath + "' does not exist" );
            System.exit( 2 );
        }
        else
        {

            Object[] o = new Object[]{};
            try
            {
                o = (Object[]) XMLDocumentParser.parseXMLDocument( batchFilePath, "batchFile" );
            }
            catch( Exception e )
            {
                System.out.println( "Error parsing the batch file" );
                System.out.println( e.getMessage() );
                System.exit( 3 );
            }
            for( int i = 0; i < o.length; ++i )
            {
                Batch b = (Batch) o[i];
                DataModel dm = new DataModel( "features.xml", null );
                try
                {
                    int rowCount = songsTable.getModel().getRowCount();
                    RecordingInfo[] recordingInfos = new RecordingInfo[rowCount];
                    for( int row = 0; row < rowCount; row++ )
                    {
                        String name = (String) songsTable.getModel().getValueAt( row, 0 );
                        String path = (String) songsTable.getModel().getValueAt( row, 1 );
                        RecordingInfo recordingInfo = new RecordingInfo( name, path, null, false );
                        recordingInfos[row] = recordingInfo;
                    }
                    b.setRecording( recordingInfos );

                    dm.featureKey = new FileOutputStream( new File( b.getDestinationFK() ) );
                    dm.featureValue = new FileOutputStream( new File( b.getDestinationFV() ) );
                    b.setDataModel( dm );
                    CommandLineThread clt = new CommandLineThread( b );
                    clt.start();
                    while( clt.isAlive() )
                    {
                        if( System.in.available() > 0 )
                        {
                            clt.cancel();
                        }
                        clt.join( 1000 );
                    }
                }
                catch( Exception e )
                {
                    System.out.println( "Error in execution - skipping this batch (" + b.getName() + ")" );
                    e.printStackTrace();
                }
            }

            System.out.println( "Time taken for Feature extraction : " + ( System.currentTimeMillis() - startTime ) / 1000 + " sec" );
        } */
    }//GEN-LAST:event_jButton3ActionPerformed

    // song class add
    private void jButton4ActionPerformed( java.awt.event.ActionEvent evt )
    {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        // Add song classes
        Vector data = new Vector<Boolean>();
        for( int i = 0; i < ( (DefaultTableModel) tblSongClasses.getModel() ).getRowCount(); i++ )
        {
            data.add( false );
        }
        ( (DefaultTableModel) tblSongClasses.getModel() ).addColumn( "Class " + ( ++lastAddedClass ), new Vector<Boolean>() );
    }//GEN-LAST:event_jButton4ActionPerformed

    private void btnAddCollectionActionPerformed( java.awt.event.ActionEvent evt )
    {//GEN-FIRST:event_jButton1ActionPerformed
        String res = JOptionPane.showInputDialog( "Enter Collection Name:" );
        if( res == null || res.isEmpty() )
        {
            res = "New Collection";
        }
        SongCollection collection = new SongCollection();
        collection.setName( res );
        collection.setEnabled( true );
        collection.setSequenced( false );
        if( !musicLibraryAgent.getMusicLibrary().contains( collection ) )
        {
            musicLibraryAgent.getMusicLibrary().add( collection );

        }
        else
        {
            String originalName = collection.getName();
            for( int suffix = 0; suffix < 100; suffix++ )
            {
                collection.setName( originalName + suffix );
                if( !musicLibraryAgent.getMusicLibrary().contains( collection ) )
                {
                    musicLibraryAgent.getMusicLibrary().add( collection );
                    break;
                }
            }
        }
        ( (AbstractTableModel) tblCollectionLists.getModel() ).fireTableDataChanged();
    }

    private void btnAddSongsActionPerformed( java.awt.event.ActionEvent evt )
    {//GEN-FIRST:event_jButton1ActionPerformed
        if( musicLibraryAgent != null )
        {
            int selectedViewRow = tblCollectionLists.getSelectedRow();
            if( selectedViewRow != -1 && musicLibraryAgent != null && musicLibraryAgent.getMusicLibrary() != null )
            {
                int selectedModelRow = tblCollectionLists.convertRowIndexToModel( selectedViewRow );
                SongCollection selectedCollection = musicLibraryAgent.getMusicLibrary().get( selectedModelRow );

                if( selectedCollection != null && selectedCollection.getSongsList() != null )
                {
                    //****

                    int returnVal = fc.showOpenDialog( this );

                    if( returnVal == JFileChooser.APPROVE_OPTION )
                    {
                        File[] files = fc.getSelectedFiles();
                        List<File> fileList = new ArrayList<File>();

                        List<Song> songList = new ArrayList<Song>();
                        for( File file : files )
                        {

                            //This is where a real application would open the file.
                            System.out.println( "Addint: " + file.getName() + " : " + file.getAbsolutePath() + "\n" );
                            Song song = new Song();
                            song.setPath( file.getAbsolutePath() );
                            song.setName( file.getName() );
                            songList.add( song );  //TODO: send  to feature extraction
                            //                String[] row = {file.getName(), file.getAbsolutePath()};
                            //                ( (DefaultTableModel) tblCollectionLists.getModel() ).addRow( row );
                            //                ( (DefaultTableModel) jTableListners.getModel() ).addRow( row );
                            //                ( (DefaultTableModel) tblSongClasses.getModel() ).addRow( row );
                        }

                        if( !songList.isEmpty() )
                        {
                            selectedCollection.getSongsList().addAll( songList );
                        }

                        ( (AbstractTableModel) tblCollectionSongs.getModel() ).fireTableDataChanged();
                    }
                    else
                    {
                        System.out.println( "Open command cancelled by user." );
                    }
                }
            }
            else
            {
                JOptionPane.showMessageDialog( this, "Please select collection to add songs" );
            }
        }
        else
        {
            System.out.println( "Music library is not available for the GUI" );
        }


    }//GEN-LAST:event_jButton1ActionPerformed


    private void btnRemoveCollectionActionPerformed( java.awt.event.ActionEvent evt )
    {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        // Song Class rebuild
    }//GEN-LAST:event_jButton6ActionPerformed


    private void jButton3ActionPerformed( java.awt.event.ActionEvent evt )
    {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        // Song Class rebuild
        if( musicLibraryAgent != null )
        {
            musicLibraryAgent.saveMusicLibrary();
            System.out.println("Successfully saved library");
        }

    }//GEN-LAST:event_jButton6ActionPerformed


    // stop play
    private void btnStopActionPerformed( java.awt.event.ActionEvent evt )
    {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        stopPlay( as );
    }//GEN-LAST:event_jButton11ActionPerformed

    // start play
    private void btnPlayActionPerformed( java.awt.event.ActionEvent evt )
    {//GEN-FIRST:event_jButton10ActionPerformed
        /* TODO add your handling code here:
        InputStream in = null;
        try
        {
            List<String> mostLikedSong = new ArrayList<String>();
            int mostLiked = 0;
            for( int songRow = 0; songRow < jTableListners.getModel().getRowCount(); songRow++ )
            {
                int likes = 0;
                for( int listnerColumn = 1; listnerColumn < jTableListners.getModel().getColumnCount(); listnerColumn++ )
                {
                    Object valueAt = jTableListners.getModel().getValueAt( songRow, listnerColumn );
                    if( valueAt != null && valueAt.equals( true ) )
                    {
                        likes++;
                    }
                }
                if( likes > mostLiked )
                {
                    mostLikedSong = new ArrayList<String>();
                    mostLikedSong.add( getSongPath( songRow ) );
                    mostLiked = likes;
                }
                else if( likes == mostLiked )
                {
                    mostLikedSong.add( getSongPath( songRow ) );
                }
            }
            for( String fileUrl : mostLikedSong )
            {
                playSong( fileUrl );
                try
                {
                    Thread.sleep( 1000 * 60 * 1 );
                }
                catch( InterruptedException e )
                {
                    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                }
            }
        }
        catch( FileNotFoundException e )
        {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
        catch( IOException e )
        {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }*/
    }//GEN-LAST:event_jButton10ActionPerformed

    //    private String getSongPath( int songLine )
    //    {
    //        return ( songsTable.getModel().getValueAt( songLine, 1 ) ).toString();
    //    }

    private void playSong( String filePath ) throws IOException
    {
        System.out.println( "Playing song : " + filePath );
        InputStream in;
        stopPlay( as );
        File song = new File( filePath );
        in = new FileInputStream( song );
        as = new AudioStream( in );
        AudioPlayer.player.start( as );
    }

    private void stopPlay( AudioStream aStream )
    {
        AudioPlayer.player.stop( aStream );
    }

    private void jButton7ActionPerformed( java.awt.event.ActionEvent evt )
    {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        // Add Song listners
        Vector data = new Vector<Boolean>();
        for( int i = 0; i < ( (DefaultTableModel) jTableListners.getModel() ).getRowCount(); i++ )
        {
            data.add( false );
        }
        ( (DefaultTableModel) jTableListners.getModel() ).addColumn( "Listener " + ( ++lastAddedUserId ), new Vector<Boolean>() );
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton9ActionPerformed( java.awt.event.ActionEvent evt )
    {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        // Listner rebuild
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton6ActionPerformed( java.awt.event.ActionEvent evt )
    {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        // Song Class rebuild
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main( String args[] )
    {
        startGui( null );

    }

    public static void startGui( MusicLibraryAgent musicLibraryAgent )
    {
    /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try
        {
            for( UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels() )
            {
                if( "Windows".equals( info.getName() ) )
                {
                    UIManager.setLookAndFeel( info.getClassName() );
                    break;
                }
            }
        }
        catch( ClassNotFoundException ex )
        {
            java.util.logging.Logger.getLogger( MainFrame.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        catch( InstantiationException ex )
        {
            java.util.logging.Logger.getLogger( MainFrame.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        catch( IllegalAccessException ex )
        {
            java.util.logging.Logger.getLogger( MainFrame.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        catch( UnsupportedLookAndFeelException ex )
        {
            java.util.logging.Logger.getLogger( MainFrame.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        //</editor-fold>

        fc.setMultiSelectionEnabled( true );
        fc.setCurrentDirectory( new File( "D:" ) );
        final MainFrame mainFrame = new MainFrame( musicLibraryAgent );

        /* Create and display the form */
        java.awt.EventQueue.invokeLater( new Runnable()
        {
            public void run()
            {
                mainFrame.setVisible( true );
            }
        } );
    }

    private AudioStream as;
    int lastAddedUserId;
    int lastAddedClass;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCollection;
    private javax.swing.JButton btnAddSongs;
    private javax.swing.JButton btnRemoveCollection;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnStop;

    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;

    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;

    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;

    private javax.swing.JTable tblCollectionLists;
    private javax.swing.JTable tblCollectionSongs;
    private javax.swing.JTable jTableListners;
    private javax.swing.JTable tblSongClasses;
    // End of variables declaration//GEN-END:variables
}
